
int searchBack(){
	printf("Beginning searchback protocols\n");
	int indexLatestMiss = tempIndexPeaksForSearchback;
	int indexMostBackwards = searchBackBackwardsGoer(indexLatestMiss,0);
	if(indexMostBackwards != -1){
		int indexForward = searchBackForwardGoer;
		if(indexForward == -2){
			/*Searchback new interval for missed, because of misses*/
		} else if (indexForward == -1) {
			/*It didn't find a new peak, but there wheren't any misses*/
		}	else{
			/*It found a new peak, now it needs to check the first miss*/
			if (RR_Low < tempPeaksForSearchbackRR[tempIndexPeaksForSearchback] && tempPeaksForSearchbackRR[tempIndexPeaksForSearchback] < RR_High){
								recordNewProperRPeak(peakValue, peakTime_0, rPeakTime_7);
			} else if(tempPeaksForSearchbackRR[j] > RR_Miss){

			}			
		}
	}	else{
		return 0;
	}	


	/*
	int i = tempIndexPeaksForSearchback - 2;
	int hasFoundProperNewPeak = 0;
	for(; i >= 0; i--){
		if (checkSearchBack(i)){
			hasFoundProperNewPeak = 1;
			break;
		}
	}
	*/
	/*If it has found a peak that can be taken as an R peak looking back through the array,
	 * It will check if some of the later peaks then are R peaks, if it is one.*/
	if(hasFoundProperNewPeak){
		/*Hack/Hijack of variable for efficiency*/
		hasFoundProperNewPeak = tempPeaksForSearchbackRR[i];
		int j = i + 1;
		for(; i <= tempIndexPeaksForSearchback; j++){
			tempPeaksForSearchbackRR[j] -= hasFoundProperNewPeak;
			if (RR_Low < tempPeaksForSearchbackRR[j] && tempPeaksForSearchbackRR[j] < RR_High){
					recordNewProperRPeak(peakValue, peakTime_0, rPeakTime_7);
					hasFoundProperNewPeak += tempPeaksForSearchbackRR[j];
					i = j;
			} else if(tempPeaksForSearchbackRR[j] > RR_Miss){

			}
		}
		tempIndexPeaksForSearchback = 0;
		return 1;
	} else if (checkSearchBack(tempIndexPeaksForSearchback)){
		/*If it can't find any peaks that can be taken as an R,
		 * before the peak that has an RR value greater than RR-miss,
		 * it looks at that as an potential peak.*/
		tempIndexPeaksForSearchback = 0;
		return 1;
	} else{
		/*No proper search back peak found*/
		tempIndexPeaksForSearchback = 0;
		return 0;
	}
}

int searchBackBackwardsGoer(int indexMiss, int indexMostBack){
	int i = indexMiss - 2;
		int hasFoundProperNewPeak = 0;
		for(; i >= indexMostBack; i--){
			if (checkSearchBack(i)){
				hasFoundProperNewPeak = 1;
				return i;
			}
		}
	return -1;
}

int searchBackForwardGoer(){
	
}
